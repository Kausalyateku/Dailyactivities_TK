# Guaranteed Publisher publishing persistent messages

import os

import platform

import time

import threading

from solace.messaging.messaging_service import MessagingService, ReconnectionListener, ReconnectionAttemptListener, ServiceInterruptionListener, RetryStrategy, ServiceEvent

from solace.messaging.publisher.persistent_message_publisher import PersistentMessagePublisher

from solace.messaging.publisher.persistent_message_publisher import MessagePublishReceiptListener

from solace.messaging.resources.topic import Topic

if platform.uname().system == 'Windows': os.environ["PYTHONUNBUFFERED"] = "1" # Disable stdout buffer

lock = threading.Lock() # lock object that is not owned by any thread. Used for synchronization and counting the

TOPIC_PREFIX = "abcd"

# Inner classes for error handling

class ServiceEventHandler(ReconnectionListener, ReconnectionAttemptListener, ServiceInterruptionListener):

  def on_reconnected(self, e: ServiceEvent):

    print("\non_reconnected")

    print(f"Error cause: {e.get_cause()}")

    print(f"Message: {e.get_message()}")

  def on_reconnecting(self, e: "ServiceEvent"):

    print("\non_reconnecting")

    print(f"Error cause: {e.get_cause()}")

    print(f"Message: {e.get_message()}")

  def on_service_interrupted(self, e: "ServiceEvent"):

    print("\non_service_interrupted")

    print(f"Error cause: {e.get_cause()}")

    print(f"Message: {e.get_message()}")

class MessageReceiptListener(MessagePublishReceiptListener):

  def _init_(self):

    self._receipt_count = 0

  @property

  def receipt_count(self):

    return self._receipt_count

  def on_publish_receipt(self, publish_receipt: 'PublishReceipt'):

    with lock:

      self._receipt_count += 1

      print(f"\npublish_receipt:\n {self.receipt_count}\n")

# Broker Config. Note: Could pass other properties Look into

broker_props = {

  "solace.messaging.transport.host": os.environ.get('SOLACE_HOST') or "tcp://localhost:55555,tcp://localhost:5555",

  "solace.messaging.service.vpn-name": os.environ.get('SOLACE_VPN') or "default",

  "solace.messaging.authentication.scheme.basic.username": os.environ.get('SOLACE_USERNAME') or "default",

  "solace.messaging.authentication.scheme.basic.password": os.environ.get('SOLACE_PASSWORD') or "default",

  "solace.messaging.tls.cert-validated":False,

  "solace.messaging.tls.cert-validated-date":False,

  }

# Build A messaging service with a reconnection strategy of 20 retries over an interval of 3 seconds

# Note: The reconnections strategy could also be configured using the broker properties object

messaging_service = MessagingService.builder().from_properties(broker_props)\

          .with_reconnection_retry_strategy(RetryStrategy.parametrized_retry(20,3))\

          .build()

# Blocking connect thread

messaging_service.connect()

print(f'Messaging Service connected? {messaging_service.is_connected}')

# Event Handling for the messaging service

service_handler = ServiceEventHandler()

messaging_service.add_reconnection_listener(service_handler)

messaging_service.add_reconnection_attempt_listener(service_handler)

messaging_service.add_service_interruption_listener(service_handler)

# Create a persistent message publisher and start it

publisher: PersistentMessagePublisher = messaging_service.create_persistent_message_publisher_builder().build()

publisher.start()

# set a message delivery listener to the publisher

receipt_listener = MessageReceiptListener()

publisher.set_message_publish_receipt_listener(receipt_listener)

# Prepare the destination topic

topic = Topic.of(TOPIC_PREFIX + f'/persistent/pub')

# Prepare outbound message payload and body

message_body = "message from Kausalya"

outbound_msg_builder = messaging_service.message_builder() \

        .with_application_message_id("sample_id") \

        .with_property("application", "samples") \

        .with_property("language", "Python")

count = 0

try:

  while True:

    outbound_msg = outbound_msg_builder \

          .with_application_message_id(f'NEW {count}')\

          .build(f'{message_body} + {count}')

    publisher.publish(outbound_msg, topic)

    print(f'PERSISTENT publish message {count} is successful... Topic: [{topic.get_name()}]')

    count +=1

    time.sleep(0.1)

except KeyboardInterrupt:

  print(f'\nDelivery receipt count: {receipt_listener.receipt_count}\n')

  print('\nTerminating Publisher')

  publisher.terminate()

  print('\nDisconnecting Messaging Service')

  messaging_service.disconnect()



CMD:

Microsoft Windows [Version 10.0.22621.2134]
(c) Microsoft Corporation. All rights reserved.

C:\Users\tekuk\Downloads\solace-training-july-23-main>cd Hands-on\solace-samples-python

C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>py -m venv venv     

C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>venv\Scripts\activate

(venv) C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>pip install -r requirements.txt
Requirement already satisfied: autopep8==1.6.0 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 1)) (1.6.0)
Requirement already satisfied: certifi==2020.12.5 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 2)) (2020.12.5)
Requirement already satisfied: chardet==4.0.0 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 3)) (4.0.0)
Requirement already satisfied: idna==2.10 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 4)) (2.10)
Requirement already satisfied: pycodestyle==2.8.0 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 5)) (2.8.0)
Requirement already satisfied: requests==2.25.1 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 6)) (2.25.1)
Requirement already satisfied: solace-pubsubplus==1.5.0 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 7)) (1.5.0)
Requirement already satisfied: toml==0.10.2 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 8)) (0.10.2)
Requirement already satisfied: urllib3==1.26.4 in c:\users\tekuk\downloads\solace-training-july-23-main\hands-on\solace-samples-python\venv\lib\site-packages (from -r requirements.txt (line 9)) (1.26.4)

[notice] A new release of pip available: 22.3.1 -> 23.2.1      
[notice] To update, run: python.exe -m pip install --upgrade pip

(venv) C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>set SOLACE_HOST=wss://mr-connection-p9w1bjuczfu.messaging.solace.cloud:443
lient

(venv) C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>set SOLACE_PASSWORD=81bsn4t3b1g7p79haq9haard7o

(venv) C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python>cd patterns/

(venv) C:\Users\tekuk\Downloads\solace-training-july-23-main\Hands-on\solace-samples-python\patterns>python guaranteed_publisher.py
2023-08-10 21:18:41,259 [WARNING] solace.messaging.core: [_solace_transport.py:84]  [[SERVICE: 0x26693af6e10] - [APP ID: DESKTOP-1ML1NHE/23260/00000001/h___tDuo58]] {'caller_description': 'From service event callback', 'return_code': 'Ok', 'sub_code': 'SOLCLIENT_SUBCODE_OK', 'error_info_sub_code': 0, 'error_info_contents': ''}
Messaging Service connected? True
PERSISTENT publish message 0 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 1 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 2 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 3 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 4 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 5 is successful... Topic: [abcd/persistent/pub]
PERSISTENT publish message 6 is successful... Topic: [abcd/persistent/pub]

Delivery receipt count: 0


Terminating Publisher
